	<LO description="A  template for presenting a piece of media and creating a series of interactions " targetFolder="mediaInteractions" version="1.0" styleSheet="templatePath + 'common/styles.css'" selectableText="1" templateData="FileLocation + 'mediaInteractions.xml'" name="Media Interactions">		<SCR name="makePages"><![CDATA[//loop through the xml and insert a page of the right type for each page typeifc = icon.nextSibling;pageStore = icon.parentNode.getChildByName('pageStore');linkIndex = -1;pgOffset = 1;//custom interfaceif (templateData.learningObject[0].controller != undefined){  icon.nextSibling.attributes.swf = templateData.learningObject[0].controller;  icon.nextSibling.attributes.visuals = 0;}//help fileif (templateData.learningObject[0].nfo != undefined){  icon.nextSibling.attributes.helpfile = templateData.learningObject[0].nfo;}//default text sizeif (templateData.learningObject[0].textSize != undefined){  STYLES.defaultSize = templateData.learningObject[0].textSize;  STYLES.inputSize = templateData.learningObject[0].textSize;}for (i = 0; i < extXML.firstChild.childNodes.length; i++){  //build this file dynamically  modName = extXML.firstChild.childNodes[i].nodeName;    if (modName == 'xerteModel'){    newXML = new XML('<PG model="' + extXML.firstChild.childNodes[i].attributes.modelFile + '"/>');    //is there an initObject...?    if (extXML.firstChild.childNodes[i].attributes.initObject != undefined){      newXML.firstChild.attributes.initObject = extXML.firstChild.childNodes[i].attributes.initObject;    }  } else {    newXML = new XML('<PG model="templatePath + \'models/' + modName + '.rlm\'"/>');  }  newChild = newXML.firstChild;  newChild.attributes.title = extXML.firstChild.childNodes[i].attributes.name;  newChild.attributes.linkID = extXML.firstChild.childNodes[i].attributes.linkID;    if (extXML.firstChild.childNodes[i].attributes.linkID == _level0.linkID && extXML.firstChild.childNodes[i].attributes.linkID != undefined){    linkIndex = i;  }  ifc.appendChild(newChild);}]]></SCR>		<IFC name="interface" title="My Learning Object" visuals="1">			<FW_ENT id="entryFrame" name="background">				<DIS id="toggle" textSize="10" name="mediaAndTranscript" x="510" y="494" w="200" h="10" type="text"><![CDATA[<b>Show Media and Transcript</b>]]></DIS>				<DIS id="lessonImage" y="-1" h="516" w="342" name="lessonImage" x="9" type="ext" url="templatePath + 'common/default.png'"><![CDATA[]]></DIS>				<INT name="lessonIMageEvents" perpetual="1">					<RES name="onLoad" type="event" eventName="onLoad" icon="lessonImage" erase="1" exit="0">						<SCR name="showFW_ENT"><![CDATA[lessonImage._x = 9;lessonImage._width = 342;lessonImage._height = 517;entryFrame._visible = true;]]></SCR>					</RES>					<RES name="onRelease" type="event" eventName="onRelease" icon="toggle" erase="1" exit="0">						<SCR name="toggleDisplay"><![CDATA[if (lessonImage._x == 9){  toggle.setText('<b>Hide Media and Transcript</b>');  lessonImage.animate(-400,-1,10,'linearTween');} else {  toggle.setText('<b>Show Media and Transcript</b>');  lessonImage.animate(9,-1,10,'linearTween');}]]></SCR>					</RES>				</INT>				<SCR isFunc="1" name="fLoadImage"><![CDATA[if (args[0] != undefined){  entryFrame._visible = false;  lessonImage.loadImage(expression(args[0], _level0.engine));}]]></SCR>				<SCR isFunc="1" name="fShowMedia"><![CDATA[if (args[0] == 'true'){  toggle.setText('<b>Hide Media and Transcript</b>');  lessonImage._x = -400;} else {  toggle.setText('<b>Show Media and Transcript</b>');  lessonImage._x = 9;}]]></SCR>				<SCR name="soundOrVideo"><![CDATA[entryFrame.beginFill(STYLES.statusBarColour, 100);entryFrame.drawRect(0,0,360,516);entryFrame.beginFill(0xFFFFFF,100);entryFrame.swapDepths(99);lessonImage.swapDepths(99);rootIcon.loadIcon(templatePath + 'common/icon.png');if (templateData.learningObject[0].media.indexOf('.flv') != -1){//video  mediaType = 'video';  icon.parentNode.getChildByName('sound').removeNode();  icon.parentNode.getChildByName('loadMedia').firstChild.attributes.eventName = 'onMovieReady';  } else if (templateData.learningObject[0].media.indexOf('.mp3') != -1){  mediaType = 'sound';  icon.parentNode.getChildByName('video').removeNode();  icon.parentNode.getChildByName('loadMedia').removeNode();   entryFrame.drawRect(10,32,340,474);      transcriptH = 474;    } else {  mediaType = 'text';  icon.parentNode.getChildByName('sound').removeNode();  icon.parentNode.getChildByName('video').removeNode();  icon.parentNode.getChildByName('loadMedia').removeNode();  entryFrame.drawRect(10,1,340,514);    transcriptH = 514;}rootIcon.trackTextFields();]]></SCR>				<SND id="mediaIcon" controls="10,0,340" name="sound" type="ext" url="{templateData.learningObject[0].media}" play="0" loop="0" wait="0" />				<MOV w="340" id="mediaIcon" name="video" x="10" y="0" url="{templateData.learningObject[0].media}" controls="1" play="0"><![CDATA[]]></MOV>				<INT name="loadMedia" perpetual="0">					<RES name="loader" type="event" eventName="onLoad" icon="mediaIcon" erase="1" exit="1">						<SCR name="getDimensions"><![CDATA[transcriptH = 474 - mediaIcon._height;entryFrame.drawRect(10,mediaIcon._height + 30,340,transcriptH);]]></SCR>					</RES>				</INT>				<SCR name="makeTranscript"><![CDATA[//is this reading exercise?rawTrans = templateData.learningObject[0].transcript;if (rawTrans.indexOf('<p begin') == -1){  rawTrans = '<p begin="99999">' + rawTrans + '</p>';}//split the transcript - need to handle no chunkstrans = new XML(rawTrans);trans = trans.toObject();if (icon.built != true){  icon.nextSibling.firstChild.firstChild.duplicate(trans.p.length - 1);  icon.nextSibling.firstChild.lastChild.firstChild.duplicate(trans.p.length - 1);  icon.built = true;}if (mediaType == 'text'){  baseY = 0;  chunkHeight = 514;} else {   chunkHeight = 10;  baseY = mediaIcon._y + mediaIcon._height + (mediaType == 'sound' ? 10 : 30); }if (trans.p.length == 1){  chunkHeight = transcriptH;  icon.nextSibling.firstChild.firstChild.attributes.scrolling = 'auto';  icon.nextSibling.lastChild.lastChild.lastChild.removeNode();  icon.nextSibling.lastChild.lastChild.lastChild.removeNode();}//variablesendTime = -1;playingChunk = false;chunkIndex = -1;lastChunk = 0;chunk = 0;chunkOffset = 0;]]></SCR>				<DEC id="dec" name="transcriptChunks" repeat="all" branch="sequence" pause="0" erase="0" eraseOnExit="0">					<PG id="chunks" name="chunks">						<DIS id="protoChunk" textColour="#333333" name="protoChunk" x="10" y="icon.index() == 0 ? baseY : _ytile + 5" w="310" h="chunkHeight" type="text"><![CDATA[{trans.p[icon.index()]}]]></DIS>						<INT name="clickToPlay" perpetual="1">							<RES name="onRelease" type="event" eventName="onRelease" icon="chunks.children[icon.index()]" erase="1" exit="0">								<SCR name="playChunk"><![CDATA[playChunk(icon.parentNode.index());]]></SCR>							</RES>						</INT>					</PG>					<PG id="mask" name="mask">						<SCR name="makeMask"><![CDATA[mask.beginFill(0xFF0000,100);mask.drawRect(10,baseY,340,transcriptH);chunks.setMask(mask);]]></SCR>					</PG>					<PG name="events&functions">						<SCR isFunc="1" name="playChunk"><![CDATA[lastChunk = 0;fIndex = args[0];pos = 0; endTime = Number(trans.p[fIndex].end);playingChunk = true;ticks = 0;if (mediaType == 'sound'){  mediaIcon.play(Number(trans.p[fIndex].begin * 1000));}if (mediaType == 'video'){  mediaIcon.flvPlayer.seek(Number(trans.p[fIndex].begin));  mediaIcon.flvPlayer.play();}chunk = chunks.children[fIndex];chunk.beginFill(0xFFFF00,100);chunk.drawRect(0,0,chunk._width,chunk._height);chunks.animate(chunks._x, 0 + (baseY - chunk._y), 5, 'linearTween');]]></SCR>						<SCR isFunc="1" name="stopChunk"><![CDATA[pos = 0;if (mediaType == 'sound'){  mediaIcon.reset();} else {  mediaIcon.stop();   mediaIcon.reset();}  playingChunk = false;]]></SCR>						<INT name="events" perpetual="1">							<RES name="onEnterFrame" type="event" eventName="onEnterFrame" icon="mediaIcon" erase="1" exit="0">								<SCR name="highlight"><![CDATA[//find the current chunk index - we have the position of the sound. Need to loop over chunks and find the indexticks++; //a timer to prevent the stopper triggering too early when playing chunksif (mediaType == 'sound'){  pos = mediaIcon.sound.position / 1000;} else {  pos = mediaIcon.flvPlayer.playheadTime;}chunkIndex = -1;for (i = 0; i < trans.p.length; i++){  if (pos >= Number(trans.p[i].begin)){    chunkIndex = i;  } else {    break;  }}//highlight and animateif (chunkIndex != -1){    chunk = chunks.children[chunkIndex];    if (chunk != lastChunk){      lastChunk.clear();    lastChunk = chunk;        chunk.beginFill(0xFFFF00,100);    chunk.drawRect(0,0,chunk._width,chunk._height);    chunks.animate(chunks._x, 0 + (baseY - chunk._y) + chunkOffset, 5, 'linearTween');  }} else { //sound is stopped  chunk.clear();  chunks._y = 0 + chunkOffset;  lastChunk = 0;  }//finish a chunk?if (playingChunk == true){  if (pos >= endTime){    if (ticks > 10){      stopChunk();    }  }}]]></SCR>							</RES>							<RES name="onSoundComplete" type="event" eventName="onSoundComplete" icon="mediaIcon" erase="1" exit="0">								<SCR name="reset"><![CDATA[chunk.clear();chunks.animate(chunks._x, 0, 5, 'linearTween');chunkOffset= 0;]]></SCR>							</RES>							<RES name="onMovieComplete" type="event" eventName="onMovieComplete" icon="mediaIcon" erase="1" exit="0">								<SCR name="reset"><![CDATA[chunk.clear();chunks.animate(chunks._x, 0, 5, 'linearTween');chunkOffset = 0;]]></SCR>							</RES>							<RES swf="templatePath + 'common/up.swf'" name="scrollUp" type="button" x="325" y="baseY + 3" label="up" erase="1" exit="0">								<SCR name="[Untitled]"><![CDATA[if (chunks._y < 0){  chunks._y += 22;  chunkOffset += 22;}]]></SCR>							</RES>							<RES swf="templatePath + 'common/down.swf'" name="scrollDown" type="button" x="325" y="480" label="down" erase="1" exit="0">								<SCR name="[Untitled]"><![CDATA[if (chunks._y > transcriptH - chunks._height){  chunks._y -= 22;  chunkOffset -= 22;}]]></SCR>							</RES>						</INT>					</PG>				</DEC>				<COM id="cpad" name="characterPad" url="templatePath + 'common/charPad.swf'" initObject="{language: templateData.learningObject[0].language}" />				<INT id="myInt" name="eventHandlers" perpetual="0">					<RES name="onInit" type="event" eventName="onInit" icon="rootIcon" erase="1" exit="0">						<SCR name="jump"><![CDATA[if (templateData.learningObject[0].displayMode != undefined){  rootIcon.setDisplayMode(templateData.learningObject[0].displayMode);}if (linkIndex != -1){  rootIcon.gotoPage(linkIndex);}]]></SCR>					</RES>					<RES name="onThemeChange" type="event" eventName="onThemeChange" icon="rootIcon" erase="1" exit="0">						<SCR name="update"><![CDATA[clearInterval(mediaIcon.resetID);entryFrame.initPage();rootIcon.setPageTitle(rootIcon.pages[rootIcon.currentPage].XMLElement.attributes.title);]]></SCR>					</RES>					<RES name="onClosePage" type="event" eventName="onClosePage" icon="rootIcon" erase="1" exit="0">						<SCR name="stopChunk"><![CDATA[stopChunk();if (engine[ytID] != undefined){    engine[ytID].destroy();  delete engine[ytID];}]]></SCR>					</RES>				</INT>			</FW_ENT>		</IFC>		<BIN myLongVarName="A variable for tracking the user" name="Deleted Items" />	</LO>